install.packages("stylo")
library(stylo)
q()
hclust(x)
hclust("lirem")
hclust(123)
plot(hclust(123))
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
install.packages("servr")
install.packages("plumber")
A <- as.cl_partition(c(1, 1, 2, 3, 3, 5, 5))
install.packages("clue")
A <- as.cl_partition(c(1, 1, 2, 3, 3, 5, 5))
cl_partition()
cl_meet()
clue.cl_meet()
install.packages("clue")
clue.cl_meet()
cl_meet()
install clue
help(package = "clue")
A <- clue::as.cl_partition(c(1, 1, 2, 3, 3, 5, 5))
B <- clue::as.cl_partition(c(1, 2, 2, 3, 4, 5, 5))
(A <= B) || (B <= A)
clue::cl_meet(A, B)
clue::cl_join(A, B)
C_lumper <- clue::as.cl_partition(rep(1, n_of_objects(A)))
C_lumper <- clue::as.cl_partition(rep(1, clue::n_of_objects(A)))
clue::cl_meet(clue::cl_ensemble(A, B, C_lumper))
C_splitter <- clue::as.cl_partition(seq(length = clue::n_of_objects(A)))
clue::cl_join(clue::cl_ensemble(A, B, C_splitter))
range(A, B, C_splitter)$max
install.package("jsonlite")
install.packages("jsonlite")
jsonlite::toJSON(A)
smooth.spline(A)
T <- c(1, 1, 2, 3, 3, 5, 5)
jsonlite::toJSON(A)
jsonlite::toJSON(T)
as.cl_ensemble(T)
clue::as.cl_ensemble(T)
data("CKME")
data("clue::CKME")
clue::cl_ensemble(T)
jsonlite::toJSON(T)
clue::as.cl_ensemble(T)
d <- dist(USArrests)
hclust_methods <-#
    c("ward", "single", "complete", "average", "mcquitty")
hclust_results <- lapply(hclust_methods, function(m) hclust(d, m))
names(hclust_results) <- hclust_methods
hens <- cl_ensemble(list = hclust_results)
hens <- clue::cl_ensemble(list = hclust_results)
hens
clue::as.cl_ensemble(hens)
jsonlite::toJSON(hens)
jsonlite::toJSON(hclust_results)
hclust_results
jsonlite::toJSON(hclust_results)
data("Kinship82")
hens <- clue::cl_ensemble(list = hclust_results)
jsonlite::toJSON(T)
TT <- c(T)
jsonlite::toJSON(TT)
X <- c(c(1,2,3,4,5))
jsonlite::toJSON(X)
clue::cl_ensemble(X)
clue::cl_ensemble([X])
clue::cl_ensemble(list(X))
Y <- list(X)
jsonlite::toJSON(X)
x <- list(1,2,3)
jsonlite::toJSON(x)
y <- c(1,2,3)
jsonlite::toJSON(y)
z <- list(y)
jsonlite::toJSON(z)
clue::as_ensemble(z)
clue::as.cl_ensemble(z)
z <- list(clustering = y)
clue::as.cl_ensemble(z)
jsonlite::toJSON(z)
y <- c(1,2,3,4,5,6,7,8,9,10)
z <- list(clustering = y)
jsonlite::toJSON(z)
pam()
x <- rbind(cbind(rnorm(10,0,0.5), rnorm(10,0,0.5)),#
           cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
pamx <- pam(x, 2)
pamx <- cluster::pam(x, 2)
pamx
jsonlite::toJSON(pamx)
clue::as.cl_ensemble(pamx)
plot(pamx)
jsonlite::toJSON(pamx)
jsonlite::toJSON(pamx.clustering)
jsonlite::toJSON(pamx)
jsonlite::toJSON(x)
jsonlite::toJSON(pamx)
jsonlite::toJSON(pam)
jsonlite::toJSON(x)
jsonlite::toJSON(z)
clue::as.cl_ensemble(pamx)
clue::as.cl_ensemble(z)
clue::as.cl_ensemble(pamx)
jsonlite::toJSON(pamx)
toString(pamx)
a <- c(1,2,3,4,5)
b <- c(1,2,3,4,5)
pam(a)
cluster::pam(a)
cluster::pam(a,5)
cluster::pam(a,k=5)
cluster::pam(a,k=5.0)
cluster::pam(a,5)
cluster::pam(a,3)
a <- [0,0,0,1,1,2,2,2]
a <- c(0,0,0,1,1,2,2,2)
b <- c(0,0,0,1,1,2,2,2)
pa <- cluster:pam(a,3)
pa <- cluster.:pam(a,3)
pa <- cluster::pam(a,3)
pb <- cluster::pam(b,3)
clue::cl_dissimilarity(pa,pb)
clue::cl_dissimilarity(pa,pb,method="Rand")
clue::cl_dissimilarity(pa,pb,method="BA/E")
d <- c(1,0,0,1,0,2,1,2,2)
pd <- cluster::pam(d,3)
clue::cl_dissimilarity(pa,pd,method="BA/E")
d <- c(1,0,1,0,2,0,2,2)
pd <- cluster::pam(d,3)
clue::cl_dissimilarity(pa,pd,method="BA/E")
clue::cl_dissimilarity(pa,pd,method="Rand")
toString(pd)
adjustedRandIndex(a,b)
mclust::adjustedRandIndex(a,b)
install.packages("mclust")
mclust::adjustedRandIndex(a,b)
mclust::adjustedRandIndex(a,d)
mclust::adjustedRandIndex(a,c)
mclust::adjustedRandIndex(a,d)
mclust::adjustedRandIndex(a,b)
e <- c(1,0,1,0,2,0,2,2)
mclust::adjustedRandIndex(a,e)
mclust::adjustedRandIndex(d,e)
mclust::adjustedRandIndex(d,a)
mclust::adjustedRandIndex(d,e)
clue::cl_dissimilarity(pa,pd,method="Rand")
clue::cl_dissimilarity(pe,pd,method="Rand")
pe <- pam(e,3)
pe <- cluster::pam(e,3)
clue::cl_dissimilarity(pe,pd,method="Rand")
f <- c(3,4,5,3,4,5,3,4)
pf <- cluster::pam(f,3)
clue::cl_dissimilarity(pe,pf,method="Rand")
mclust::adjustedRandIndex(f,e)
clue::cl_agreement(pe,pf,method="Rand")
a <- c(1,2,2,1,0,0,1)
b <- c(0,1,1,0,2,2,0)
mclust::adjustedRandIndex(a,b)
pa <- cluster::pam(a,3)
pb <- cluster::pam(b,3)
clue::cl_agreement(pa,pb,method="Rand")
clue::cl_dissimilarity(pa,pb,method="Rand")
clue::cl_dissimilarity(pa,pb,method="BA/E")
clue::cl_agreement(pa,pb,method="BA/E")
clue::cl_dissimilarity(pa,pb,method="BA/E")
pbb <- cluster::pam(b,2)
clue::cl_agreement(pbb,pb,method="BA/E")
clue::cl_dissimilarity(pbb,pb,method="BA/E")
clue::cl_dissimilarity(pbb,pa,method="BA/E")
clue::cl_dissimilarity(pb,pa,method="BA/E")
clue::cl_dissimilarity(pa,pa,method="BA/E")
clue::cl_agreement(pb,pb,method="BA/E")
mclust::adjustedRandIndex(a,)
mclust::adjustedRandIndex(a,A)
mclust::adjustedRandIndex(a,a)
mclust::adjustedRandIndex(b,b)
p1 <- c(1,1,1,2,2,3)
p2 <- c(1,1,1,2,2,3)
dcCte:evalExprOnPartitionings(p1,3,p2,3,"clue::cl_dissimilarity(part1,part2)")
ocDte:evalExprOnPartitionings(p1,3,p2,3,"clue::cl_dissimilarity(part1,part2)")
ocDte::evalExprOnPartitionings(p1,3,p2,3,"clue::cl_dissimilarity(part1,part2)")
ocDte::evalExprOnPartitionings(p1,3,p2,2,"clue::cl_dissimilarity(part1,part2)")
devtools::install_github("dieschnittstelle/ocDte")
ocDte::evalExprOnPartitionings(p1,3,p2,2,"clue::cl_dissimilarity(part1,part2)")
p1 <- c(1,1,1,2,2,0)
p2 <- c(1,1,1,2,2,0)
ocDte::evalExprOnPartitionings(p1,3,p2,2,"clue::cl_dissimilarity(part1,part2)")
setwd
setwd("/Users/master/Documents/jkwrite/bht/runtime/workspaces/rworkspace/ocDte")
setwd("/Users/master/Documents/jkwrite/bht/runtime/workspaces/rworkspace/ocDte")
document()
library("devtools")
document()
devtools::install_github("dieschnittstelle/ocDte")
ocDte::runOperationOnPartitionings("clue::cl_dissimilarity",p1,3,p2,3)
ocDte::runOperationOnPartitionings(op="clue::cl_dissimilarity",p1,3,p2,3)
strcmp("test","test")
as.character("test") == as.character("test")
as.character("test") == as.character("test")
as.character("test") == as.character("test")
t1 <- "test"
as.character(t1) == as.character("test")
as.character(t1) == as.character("test2")
as.character(t1) == as.character("tesT")
devtools::install_github("dieschnittstelle/ocDte")
ocDte::runOperationOnPartitionings(op="clue::cl_dissimilarity",p1,3,p2,3)
